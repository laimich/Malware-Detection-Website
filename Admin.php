<?php 
//Michelle Lai
//CS 174 Sec 2, Project
//Admin page

//Uncomment line 263 to test functions

//Database table information
//admin (username, password) 
    //table is auto created, entry is auto added
//infected (name, sequence)
    //table is auto created, entries are auto added

require_once 'login.php'; //for login and database information
require_once 'sql-functions.php'; //php functions for sql


//ensure session is started and user has logged in
//ensure session matches ip and user agent string
session_start();
if(!isset($_SESSION['username']) || 
    $_SESSION['check'] != hash('ripemd128', $_SERVER['REMOTE_ADDR'].$_SERVER['HTTP_USER_AGENT'])) {
    die("Please <a href='Authenticate.php'>click here</a> to log in.");   
}
//regenerate sesssion id if the variable has not been set
if (!isset($_SESSION['initiated'])) 
{
    session_regenerate_id();
    //set variable so this only happens once per session
    $_SESSION['initiated'] = 1;    
}
//set session time out for 10 min, thus once window is closed, must relog in
ini_set('session.gc_maxlifetime', (60 * 10));
//alternative to ending session after 10 min that user was last authenticated
if(isset($_SESSION['timeSet'])) {
    //checks with time that user was last authenticated
    $timeSet = $_SESSION['timeSet'];
    if($timeSet + (60 * 10) < time()) {
        destroy_session_and_data();
    }
}

//variable for php and javascript input format or bound restrictions
$nameRegex = "/[^a-zA-z0-9]/"; //allow english letters, digits

//if logout button was clicked, end the session
if(isset($_POST["logout"])) {
    destroy_session_and_data();
    die("You have logged out.</br>
        Please <a href='Authenticate.php'>click here</a> to log back in.");
}

//html of a form for entering a name and uploading a file
echo <<<_END
<!DOCTYPE html>
<html>
<head>
<title>Malware Signature Upload</title>
<script>
    var nameRegex = $nameRegex
</script>
<script src="validate-name.js"></script>
</head>
<body>
<form method="POST" 
      action="Admin.php" 
      enctype="multipart/form-data"
      onsubmit="return validate(this)">
    Name of Malware: <input type="text" name="malwareName">
    <p>Submit the malware as a text (.txt) file:</p>
    <input type="file" name="filename" size="10"></input><br/>
    <input type="submit" name="submit" value="Submit"></input>
</form>
<form method="POST" 
      action="Admin.php" 
      enctype="multipart/form-data">
    <input type="submit" name="logout" value="Logout""></input>
</form>
_END;

//if the submit button is selected, validate the name entered
if(isset($_POST["submit"])) {
    //validate the user input for malware name
    $name = "";
    $fail = "";
    //create connection
    $conn = new mysqli($hn, $un, $pw, $db);
    if ($conn->connect_error) die($conn->connect_error);  
    //check if each of the inputs are set, then sanitize the inputs 
    if(isset($_POST['malwareName'])) {
        $name = mysql_entities_fix_string($conn, $_POST['malwareName']);
    }
    $conn->close();

    //validate each input and save error message
    $fail .= validateName($name, $nameRegex);
    //print success message or list of all error messages
    if($fail == "") {
        echo "</br>Valid name entered.</br>";
    }
    else {
        //print error message, prevent from continuing
        die("</br>Error: $fail</br>");
    }
}

//once submit button clicked and malware name validated,
//check if the file has been uploaded
if ($_FILES) {
    //get the type of the file uploaded and checks the extension
    $type = $_FILES['filename']['type'];
    $ext = get_file_ext_txt($type);

    //check if the extension is valid (.txt)
    if($ext) { 
        //ensure a name for the malware was entered at all
        if(!isset($_POST['malwareName'])) {
            die("Error: Malware name not entered.");
        }
        //set and get the pre-chosen file name then save the file with this name
        $name = set_uploaded_name_txt("input");
        move_uploaded_file($_FILES['filename']['tmp_name'], $name);
        //display message to inform of the uploaded file's name
        echo "Uploaded file as '$name'</br></br>";

        // open the file
        $fh = fopen($name, 'r') or die("Error: File cannot be opened. ");
        //create connection
        $conn = new mysqli($hn, $un, $pw, $db);
        if ($conn->connect_error) die($conn->connect_error);   

        //get and sanitize the user entered name of the malware
        $malware = mysql_entities_fix_string($conn, $_POST['malwareName']);
        //ensure a cleaned and accepted name still exists
        if($malware == "") {
            $conn->close();
            fclose($fh);
            die("Error: Invalid name of malware entered.");
        }

        //note: # bytes in string = # characters + 1 (terminator)
        //get first 20 bytes (signature) of the file
        $seq = fread($fh, 20);
        //remove any whitespace, including spaces, newlines, etc
        $seq = preg_replace('/\s+/', '', $seq);
        //sanitize the sequence 
        $seq = mysql_entities_fix_string($conn, $seq);

        //add known malware (name, sequence) to the "infected" table in the db
        $table = "infected";
        add_known_malware($conn, $table, $malware, $seq);

        $conn->close();
        fclose($fh);
    }
    else {
        //get the uploaded file's name to display error
        $name = $_FILES['filename']['name'];
        die("Error: $name is not the correct file type.");
    }
}
else echo "</br>No text file has been uploaded. ";
echo "</body></html>";


/*
    Validate the name input with the given regex
    Checks that it's not empty and fulfills the given regex format
    @param field: value of the name field
    @param regex: regluar expression to check the name by
    @return error message or signify no error with empty string
*/
function validateName($field, $regex) {
    if($field == "") {
        //check not empty
        return "No name was entered.</br>";
    }
    else if(preg_match_all($regex, $field)) {
        //check if proper format, contains character that is not allowed
        return "Invalid characters used for name.</br>";
    }
    return "";
}

/*
    Check if the malware name and/or sequence exists for the specified table and user's connection
    @param conn: connection to the mysql database
    @param table: name of the table to check existence within the current database
    @param name: name of the malware to check if exists
    @return true/false if the record exists in the table
*/
function check_malware_exists($conn, $table, $name, $seq) {
    //setup where clause of sql
    $whereName = "name = \"$name\" ";
    $whereSeq = "sequence =  \"$seq\" ";

    //create and execute query
    //checks when only name exists, only seq exists, or both name and seq combo exists
    $query = "SELECT name FROM $table WHERE $whereName UNION 
                SELECT name FROM $table WHERE $whereSeq";
    $result = $conn->query($query);        
    if (!$result) die ("Access failed: " . $conn->error);
    //if query has at least one result, then record exists
    if($result->num_rows >= 1) {
        $result->close();
        return true;
    }
    $result->close();
    return false;
}

/*
    Add the given malware signature sequence into the database with the given name
    If the table does not exist, it's created with (name, sequence) columns
    If the malware name and/or sequence already exists in the db, print error to user
    @param conn: connection to the database
    @param table: table to add the known malware sequence to
    @param malwareName: user entered malware name that has already been sanitized and validated
    @param seq: malware signature sequence given by the user that has been sanitized and will be added to the db
*/
function add_known_malware($conn, $table, $malwareName, $seq) {
    //check table is created, if not, then create it
    if(!check_table_exists($conn, $table)) {
        //if doesn't exist, create with name and sequence column
        $nameColumn = "name VARCHAR(30) UNIQUE";
        $seqColumn = "sequence VARCHAR(20) UNIQUE";
        $columns = array($nameColumn, $seqColumn);
        create_table($conn, $table, $columns);
        echo "Table created: $table </br>";
    }

    //check if malware name/sequence combo already exists/used in table
    if(check_malware_exists($conn, $table, $malwareName, $seq)) {
        die("Error: Malware name or sequence already submitted.");
    }

    //add the malware (name, sequence) to the table
    $sqlValues = "\"$malwareName\", \"$seq\"";
    //create then execute query
    $query = "INSERT INTO $table VALUES($sqlValues)";
    $result = $conn->query($query);        
    if (!$result) die ("Access failed: " . $conn->error);
    echo "Successfully submitted malware \"$malwareName\". </br>";
}

/*
    Destroys the session and any of its saved data
    Received from CS 174 Lecture 19 slides
*/
function destroy_session_and_data()
{
    //overwrite data, expire cookie, and destroy session
    $_SESSION = array();
    setcookie(session_name(), '', time() - 2592000, '/');
    session_destroy();
}


$testConn = new mysqli($hn, $un, $pw, $db);
if ($testConn->connect_error) die($testConn->connect_error);

//uncomment to test functions
// test_functions_admin($testConn);

/*
    Tests the functions in the "Admin.php" class
    Function(s) tested: validateName, check_malware_exists, add_known_malware
*/
function test_functions_admin($testConn) {
    //testing validateName
    echo "</br></br></br></br>Testing validateName function";    
    echo "---------------------------------------------------------------------</br>";
    $regex = "/[^a-zA-z0-9]/";
    echo "Testing validateUsername function with regex = $regex</br>";
    echo "a) Name = test123, result = " . validateName("test123", $regex) . "</br>";
    echo "b) Name = , result = " . validateName("", $regex);
    echo "c) Name = test%er, result = " . validateName("test%er", $regex) . "</br>";
    
    //testing check_malware_exists and add_known_malware
    echo "Testing check_malware_exists and add_known_malware";
    echo "---------------------------------------------------------------------</br>";    
    echo "Check existence of malware (testFunction, testingfunctions), result = " 
        . check_malware_exists($testConn, "test", "testFunction", "testingfunctions") . "</br>";

    echo "Check existence of malware (falseName, falseSequence), result = "
        . check_malware_exists($testConn, "test", "falseName", "falseSequence") . "</br>";

    echo "Check existence of malware (falseName, testingfunctions), result = " 
        . check_malware_exists($testConn, "test", "falseName", "testingfunctions") . "</br>";

    echo "Check existence of malware (testFunction, falseSequence), result = " 
        . check_malware_exists($testConn, "test", "testFunction", "falseSequence") . "</br>";
    echo "Adding test malware sequence with (name, sequence) as (testFunction, testingfunctions) into table called test</br>";
    add_known_malware($testConn, "test", "testFunction", "testingfunctions");
}
$testConn->close();


?>